plugins {
    id 'com.github.ben-manes.versions' version '0.28.0'
    id 'org.sonarqube' version '2.8'
    id 'jacoco'
}

subprojects {
    apply plugin: 'java'
    apply plugin: 'idea'
    apply plugin: 'jacoco'
    group = 'org.jobrunr'
    version = System.getenv('DRONE_TAG') ?: "v1.0.0-SNAPSHOT"

    sourceCompatibility = JavaVersion.VERSION_1_8
    targetCompatibility = JavaVersion.VERSION_1_8

    repositories {
        mavenLocal()
        jcenter()
    }

    compileTestJava {
        sourceCompatibility = JavaVersion.VERSION_11
        targetCompatibility = JavaVersion.VERSION_11
    }

    dependencies {
        testImplementation 'org.junit.jupiter:junit-jupiter:5.6.1'
        testImplementation 'org.awaitility:awaitility:4.0.2'
        testImplementation 'org.assertj:assertj-core:3.15.0'
        testImplementation 'net.javacrumbs.json-unit:json-unit-assertj:2.17.0'
        testImplementation 'org.slf4j:slf4j-simple:1.7.30'
        testImplementation 'org.mockito:mockito-core:3.3.3'
        testImplementation 'org.mockito:mockito-junit-jupiter:3.3.3'
    }

    test {
        reports.junitXml.destination = file("/tmp/reports/$project.name")
        reports.html.destination = file("/tmp/reports/$project.name")

        useJUnitPlatform()
        testLogging {
            events "passed", "skipped", "failed"
        }
    }

    sonarqube {
        properties {
            property "sonar.sourceEncoding", "UTF-8"
            property "sonar.projectKey", "jobrunr_jobrunr"
            property "sonar.organization", "jobrunr"
        }
    }

    jacocoTestReport {
        reports {
            xml.enabled true
        }
    }

    if (JavaVersion.current().isJava8Compatible()) {
        tasks.withType(Javadoc) {
            options.addStringOption('Xdoclint:none', '-quiet')
        }
    }
}

